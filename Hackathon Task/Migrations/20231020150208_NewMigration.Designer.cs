// <auto-generated />
using System;
using Hackathon_Task.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hackathon_Task.Migrations
{
    [DbContext(typeof(numobotdbContext))]
    [Migration("20231020150208_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "answerchoice", new[] { "beginner", "intermediate", "advanced" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "choicelevel", new[] { "one", "two", "three", "four" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "dialogmessagetype", new[] { "welcome", "age_question", "skill_question", "survey_finished" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "preschoolstatus", new[] { "preschool", "homeschool", "no" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pushmessage", new[] { "change_settings", "visit_website", "add_child", "yes_no_question", "open_ended_question" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "reaction", new[] { "like", "dislike", "postpone", "read" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "recommendationday", new[] { "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "recommendationfrequency", new[] { "daily", "weekly" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "recommendationtype", new[] { "tell", "do", "ask" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hackathon_Task.Model.AlembicVersion", b =>
                {
                    b.Property<string>("VersionNum")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("version_num");

                    b.HasKey("VersionNum")
                        .HasName("alembic_version_pkc");

                    b.ToTable("alembic_version");
                });

            modelBuilder.Entity("Hackathon_Task.Model.BroadcastMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_broadcast_message_id");

                    b.ToTable("broadcast_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex(new[] { "Name", "CreatedById" }, "child_name_created_by_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "ix_child_id");

                    b.HasIndex(new[] { "Name" }, "ix_child_name");

                    b.ToTable("child");
                });

            modelBuilder.Entity("Hackathon_Task.Model.ChildRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<int?>("SubskillId")
                        .HasColumnType("integer")
                        .HasColumnName("subskill_id");

                    b.HasKey("Id");

                    b.HasIndex("SubskillId");

                    b.HasIndex(new[] { "Id" }, "ix_child_recommendation_id");

                    b.ToTable("child_recommendation");
                });

            modelBuilder.Entity("Hackathon_Task.Model.ChildRecommendationProgressMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex(new[] { "Id" }, "ix_child_recommendation_progress_message_id");

                    b.ToTable("child_recommendation_progress_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.PreschoolStatusRecommendationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_preschool_status_recommendation_type_id");

                    b.ToTable("preschool_status_recommendation_type");
                });

            modelBuilder.Entity("Hackathon_Task.Model.PushMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("interval")
                        .HasColumnName("interval");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_push_message_id");

                    b.ToTable("push_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.PushMessageResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("answered_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "ix_push_message_response_id");

                    b.HasIndex(new[] { "MessageId", "UserId" }, "uq_push_message_response_message_id_user_id")
                        .IsUnique();

                    b.ToTable("push_message_response");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SubskillId")
                        .HasColumnType("integer")
                        .HasColumnName("subskill_id");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("SubskillId");

                    b.HasIndex(new[] { "Id" }, "ix_recommendation_id");

                    b.ToTable("recommendation");
                });

            modelBuilder.Entity("Hackathon_Task.Model.RecommendationProgressMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<int?>("Percentage")
                        .HasColumnType("integer")
                        .HasColumnName("percentage");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_recommendation_progress_message_id");

                    b.ToTable("recommendation_progress_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_region_id");

                    b.HasIndex(new[] { "Name" }, "region_name_key")
                        .IsUnique();

                    b.ToTable("region");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SentPushMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex(new[] { "Id" }, "ix_sent_push_message_id");

                    b.HasIndex(new[] { "UserId" }, "ix_sent_push_message_user_id");

                    b.ToTable("sent_push_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_skill_id");

                    b.HasIndex(new[] { "Code" }, "skill_code_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "skill_name_key")
                        .IsUnique();

                    b.ToTable("skill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Subskill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<string>("Title")
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_subskill_id");

                    b.HasIndex(new[] { "SkillId", "Code" }, "subskill_skill_id_code_key")
                        .IsUnique();

                    b.ToTable("subskill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SubskillReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("SubskillId")
                        .HasColumnType("integer")
                        .HasColumnName("subskill_id");

                    b.HasKey("Id");

                    b.HasIndex("SubskillId");

                    b.HasIndex(new[] { "Id" }, "ix_subskill_reaction_id");

                    b.ToTable("subskill_reaction");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SubskillRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SubskillId")
                        .HasColumnType("integer")
                        .HasColumnName("subskill_id");

                    b.Property<int?>("SurveyChoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_choice_id");

                    b.HasKey("Id");

                    b.HasIndex("SubskillId");

                    b.HasIndex(new[] { "Id" }, "ix_subskill_recommendation_id");

                    b.HasIndex(new[] { "SurveyChoiceId", "SubskillId" }, "uq_subskill_recommendation_survey_choice_id_subskill_id")
                        .IsUnique();

                    b.ToTable("subskill_recommendation");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "ix_survey_id");

                    b.ToTable("survey");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("answered_at");

                    b.Property<int?>("ChildId")
                        .HasColumnType("integer")
                        .HasColumnName("child_id");

                    b.Property<int?>("ChoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("choice_id");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "Id" }, "ix_survey_answer_id");

                    b.HasIndex(new[] { "ChildId", "QuestionId" }, "survey_answer_child_id_question_id_key")
                        .IsUnique();

                    b.ToTable("survey_answer");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "Id" }, "ix_survey_choice_id");

                    b.ToTable("survey_choice");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer")
                        .HasColumnName("survey_id");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex(new[] { "Id" }, "ix_survey_question_id");

                    b.ToTable("survey_question");
                });

            modelBuilder.Entity("Hackathon_Task.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BotId")
                        .HasColumnType("character varying")
                        .HasColumnName("bot_id");

                    b.Property<string>("BotType")
                        .HasColumnType("character varying")
                        .HasColumnName("bot_type");

                    b.Property<string>("ConversationState")
                        .HasColumnType("character varying")
                        .HasColumnName("conversation_state");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool?>("IsSubscribed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_subscribed");

                    b.Property<DateTimeOffset?>("RecommendationTime")
                        .HasColumnType("time with time zone")
                        .HasColumnName("recommendation_time");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<string>("UtmSource")
                        .HasColumnType("character varying")
                        .HasColumnName("utm_source");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "BotId" }, "ix_user_bot_id")
                        .IsUnique();

                    b.HasIndex(new[] { "BotType" }, "ix_user_bot_type");

                    b.HasIndex(new[] { "Id" }, "ix_user_id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Hackathon_Task.Model.UserBroadcastMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "ix_user_broadcast_message_id");

                    b.ToTable("user_broadcast_message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.UserVideoRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("VideoRecommendationId")
                        .HasColumnType("integer")
                        .HasColumnName("video_recommendation_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VideoRecommendationId");

                    b.HasIndex(new[] { "Id" }, "ix_user_video_recommendation_id");

                    b.ToTable("user_video_recommendation");
                });

            modelBuilder.Entity("Hackathon_Task.Model.VideoRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<string>("Text")
                        .HasColumnType("character varying")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex(new[] { "Id" }, "ix_video_recommendation_id");

                    b.ToTable("video_recommendation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hackathon_Task.Model.Child", b =>
                {
                    b.HasOne("Hackathon_Task.Model.User", "CreatedBy")
                        .WithMany("Children")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("child_created_by_id_fkey");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Hackathon_Task.Model.ChildRecommendation", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Subskill", "Subskill")
                        .WithMany("ChildRecommendations")
                        .HasForeignKey("SubskillId")
                        .HasConstraintName("child_recommendation_subskill_id_fkey");

                    b.Navigation("Subskill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.ChildRecommendationProgressMessage", b =>
                {
                    b.HasOne("Hackathon_Task.Model.RecommendationProgressMessage", "Message")
                        .WithMany("ChildRecommendationProgressMessages")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("child_recommendation_progress_message_message_id_fkey");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Hackathon_Task.Model.PushMessageResponse", b =>
                {
                    b.HasOne("Hackathon_Task.Model.PushMessage", "Message")
                        .WithMany("PushMessageResponses")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("push_message_response_message_id_fkey");

                    b.HasOne("Hackathon_Task.Model.User", "User")
                        .WithMany("PushMessageResponses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("push_message_response_user_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Recommendation", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Subskill", "Subskill")
                        .WithMany("Recommendations")
                        .HasForeignKey("SubskillId")
                        .HasConstraintName("recommendation_subskill_id_fkey");

                    b.Navigation("Subskill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SentPushMessage", b =>
                {
                    b.HasOne("Hackathon_Task.Model.PushMessage", "Message")
                        .WithMany("SentPushMessages")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("sent_push_message_message_id_fkey");

                    b.HasOne("Hackathon_Task.Model.User", "User")
                        .WithMany("SentPushMessages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("sent_push_message_user_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Subskill", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Skill", "Skill")
                        .WithMany("Subskills")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("subskill_skill_id_fkey");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SubskillReaction", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Subskill", "Subskill")
                        .WithMany("SubskillReactions")
                        .HasForeignKey("SubskillId")
                        .HasConstraintName("subskill_reaction_subskill_id_fkey");

                    b.Navigation("Subskill");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SubskillRecommendation", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Subskill", "Subskill")
                        .WithMany("SubskillRecommendations")
                        .HasForeignKey("SubskillId")
                        .HasConstraintName("subskill_recommendation_subskill_id_fkey");

                    b.HasOne("Hackathon_Task.Model.SurveyChoice", "SurveyChoice")
                        .WithMany("SubskillRecommendations")
                        .HasForeignKey("SurveyChoiceId")
                        .HasConstraintName("subskill_recommendation_survey_choice_id_fkey");

                    b.Navigation("Subskill");

                    b.Navigation("SurveyChoice");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyAnswer", b =>
                {
                    b.HasOne("Hackathon_Task.Model.SurveyChoice", "Choice")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("ChoiceId")
                        .HasConstraintName("survey_answer_choice_id_fkey");

                    b.HasOne("Hackathon_Task.Model.SurveyQuestion", "Question")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("survey_answer_question_id_fkey");

                    b.Navigation("Choice");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyChoice", b =>
                {
                    b.HasOne("Hackathon_Task.Model.SurveyQuestion", "Question")
                        .WithMany("SurveyChoices")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("survey_choice_question_id_fkey");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyQuestion", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("survey_question_survey_id_fkey");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Hackathon_Task.Model.User", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("user_region_id_fkey");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Hackathon_Task.Model.UserBroadcastMessage", b =>
                {
                    b.HasOne("Hackathon_Task.Model.BroadcastMessage", "Message")
                        .WithMany("UserBroadcastMessages")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("user_broadcast_message_message_id_fkey");

                    b.HasOne("Hackathon_Task.Model.User", "User")
                        .WithMany("UserBroadcastMessages")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_broadcast_message_user_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hackathon_Task.Model.UserVideoRecommendation", b =>
                {
                    b.HasOne("Hackathon_Task.Model.User", "User")
                        .WithMany("UserVideoRecommendations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_video_recommendation_user_id_fkey");

                    b.HasOne("Hackathon_Task.Model.VideoRecommendation", "VideoRecommendation")
                        .WithMany("UserVideoRecommendations")
                        .HasForeignKey("VideoRecommendationId")
                        .HasConstraintName("user_video_recommendation_video_recommendation_id_fkey");

                    b.Navigation("User");

                    b.Navigation("VideoRecommendation");
                });

            modelBuilder.Entity("Hackathon_Task.Model.VideoRecommendation", b =>
                {
                    b.HasOne("Hackathon_Task.Model.Skill", "Skill")
                        .WithMany("VideoRecommendations")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("video_recommendation_skill_id_fkey");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hackathon_Task.Model.BroadcastMessage", b =>
                {
                    b.Navigation("UserBroadcastMessages");
                });

            modelBuilder.Entity("Hackathon_Task.Model.PushMessage", b =>
                {
                    b.Navigation("PushMessageResponses");

                    b.Navigation("SentPushMessages");
                });

            modelBuilder.Entity("Hackathon_Task.Model.RecommendationProgressMessage", b =>
                {
                    b.Navigation("ChildRecommendationProgressMessages");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Region", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Skill", b =>
                {
                    b.Navigation("Subskills");

                    b.Navigation("VideoRecommendations");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Subskill", b =>
                {
                    b.Navigation("ChildRecommendations");

                    b.Navigation("Recommendations");

                    b.Navigation("SubskillReactions");

                    b.Navigation("SubskillRecommendations");
                });

            modelBuilder.Entity("Hackathon_Task.Model.Survey", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyChoice", b =>
                {
                    b.Navigation("SubskillRecommendations");

                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("Hackathon_Task.Model.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyAnswers");

                    b.Navigation("SurveyChoices");
                });

            modelBuilder.Entity("Hackathon_Task.Model.User", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PushMessageResponses");

                    b.Navigation("SentPushMessages");

                    b.Navigation("UserBroadcastMessages");

                    b.Navigation("UserVideoRecommendations");
                });

            modelBuilder.Entity("Hackathon_Task.Model.VideoRecommendation", b =>
                {
                    b.Navigation("UserVideoRecommendations");
                });
#pragma warning restore 612, 618
        }
    }
}
